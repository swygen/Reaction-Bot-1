import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from keep_alive import keep_alive
import asyncio

# Config
BOT_TOKEN = "8155786084:AAFSgqmR8Gxsz4XHliErBhmIpYw_bDdcjA0"
REQUIRED_CHANNEL = "@swegenbd"
DEVELOPER_USERNAME = "@Swygen_bd"
ACCESS_PASSWORD = "SR2580BD"

# Logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

EMOJI_REACTIONS = ["тЭдя╕ПтАНЁЯФе", "тЪб", "ЁЯЧ┐", "ЁЯОЙ", "ЁЯТп"]
user_password_request = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        member = await context.bot.get_chat_member(REQUIRED_CHANNEL, user.id)
        if member.status not in ["member", "administrator", "creator"]:
            raise Exception("Not joined")
    except Exception:
        join_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("тЬЕ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзЛ", url=f"https://t.me/{REQUIRED_CHANNEL.lstrip('@')}")],
            [InlineKeyboardButton("ржЖржорж┐ ржЬрзЯрзЗржи ржХрж░рзЗржЫрж┐", callback_data="check_joined")]
        ])
        await update.message.reply_text(
            "ржмржЯ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзБржи:", reply_markup=join_keyboard
        )
        return

    main_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("тЮХ Add Group", callback_data="ask_password")],
        [InlineKeyboardButton("ЁЯФС Request Key", callback_data="request_key")],
        [InlineKeyboardButton("ЁЯСд Developer", callback_data="developer")]
    ])
    await update.message.reply_text("рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪрзЗрж░ ржЕржкрж╢ржиржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:", reply_markup=main_keyboard)

async def check_joined_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()
    try:
        member = await context.bot.get_chat_member(REQUIRED_CHANNEL, user.id)
        if member.status in ["member", "administrator", "creator"]:
            main_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("тЮХ Add Group", callback_data="ask_password")],
                [InlineKeyboardButton("ЁЯФС Request Key", callback_data="request_key")],
                [InlineKeyboardButton("ЁЯСд Developer", callback_data="developer")]
            ])
            await query.edit_message_text(
                "тЬЕ ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗржи!\nржирж┐ржЪрзЗрж░ ржЕржкрж╢ржиржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:", reply_markup=main_keyboard
            )
        else:
            raise Exception("Not joined")
    except Exception:
        await query.edit_message_text("тЭМ ржЖржкржирж┐ ржПржЦржиржУ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзЗржиржирж┐! ржжрзЯрж╛ ржХрж░рзЗ ржЖржЧрзЗ ржЬрзЯрзЗржи ржХрж░рзБржиред")

async def ask_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_password_request.add(user_id)
    await query.answer()
    await query.message.reply_text("тЮХ ржЧрзНрж░рзБржкрзЗ ржмржЯ ржПржб ржХрж░рж╛рж░ ржЬржирзНржп ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб рж▓рж┐ржЦрзБржи:")

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_password_request:
        return  # ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржЪрж╛ржЗрждрзЗ рж╣рзЯржирж┐

    text = update.message.text.strip()
    if text == ACCESS_PASSWORD:
        add_group_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("тЬЕ ржПржЦржи ржмржЯржХрзЗ ржЧрзНрж░рзБржкрзЗ ржПржб ржХрж░рзБржи", url=f"https://t.me/{(await context.bot.get_me()).username}?startgroup=true")]
        ])
        await update.message.reply_text("тЬЕ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб рж╕ржарж┐ржХ! ржПржЦржи ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржмржЯржХрзЗ ржЧрзНрж░рзБржкрзЗ ржПржб ржХрж░рзБржи:", reply_markup=add_group_keyboard)
    else:
        await update.message.reply_text("тЭМ ржнрзБрж▓ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржЕржержмрж╛ 'Request Key' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред")

    user_password_request.discard(user_id)

async def request_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "ЁЯФР *ржПржХрзНрж╕ржХрзНрж▓рзБрж╕рж┐ржн ржПржХрзНрж╕рзЗрж╕ ржкрзНрж░рзЯрзЛржЬржи!*\n\n"
        "ржмржЯржХрзЗ ржЧрзНрж░рзБржкрзЗ ржпрзБржХрзНржд ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржмрж┐рж╢рзЗрж╖ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржкрзНрж░ржпрж╝рзЛржЬржиред\n"
        "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзЗрждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред\n\n"
        "_ржЖржкржирж╛рж░ ржЖржЧрзНрж░рж╣рзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!_"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("тЬЙя╕П ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи", url=f"https://t.me/{DEVELOPER_USERNAME}")]
    ])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def developer_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "ЁЯМЯ *ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ ржЫрзЛржБрзЯрж╛рзЯ ржнрж┐ржирзНржи ржПржХ ржЕржнрж┐ржЬрзНржЮрждрж╛!*\n\n"
        "*Developer: Swygen*\n"
        "ржЖржкржирж╛рж░ ржкрзНрж░рзЯрзЛржЬржирзЗрж░ ржЬржирзНржп рж╕рж░рзНржмржжрж╛ ржкрж╛рж╢рзЗ ржЖржЫрж┐ред\n\n"
        "ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("тЬЙя╕П ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи - Swygen", url=f"https://t.me/{DEVELOPER_USERNAME}")]
    ])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def react_to_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.chat.type in ["group", "supergroup"]:
        emoji = random.choice(EMOJI_REACTIONS)
        try:
            # Telegram Bot API рждрзЗ ржПржЦржирзЛ official set_message_reaction method ржирзЗржЗ python-telegram-bot рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐рждрзЗ,
            # рждрж╛ржЗ ржирж┐ржЪрзЗ рж╢рзБржзрзБ ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ рж░рж╛ржЦрж▓рж╛ржоред ржЖржкржирж┐ ржирж┐ржЬрзЗ Telegram Bot API ржПрж░ ржирждрзБржи version ржП check ржХрж░ржмрзЗржиред
            await context.bot.send_dice(chat_id=update.message.chat_id)  # рж╢рзБржзрзБржорж╛рждрзНрж░ ржбрзЗржорзЛ, ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ рж╣ржмрзЗ
            # ржпржжрж┐ reaction API ржЖрж╕рзЗ, рждржЦржи рж╣ржмрзЗ:
            # await context.bot.set_message_reaction(chat_id=update.message.chat_id, message_id=update.message.message_id, reaction=[emoji])
        except Exception as e:
            logging.warning(f"Reaction ржжрзЗржУрзЯрж╛ ржпрж╛рзЯржирж┐: {e}")

async def main():
    keep_alive()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(check_joined_callback, pattern="check_joined"))
    app.add_handler(CallbackQueryHandler(ask_password, pattern="ask_password"))
    app.add_handler(CallbackQueryHandler(request_key, pattern="request_key"))
    app.add_handler(CallbackQueryHandler(developer_info, pattern="developer"))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_password))
    app.add_handler(MessageHandler(filters.ALL & ~filters.StatusUpdate.ALL, react_to_messages))

    # Webhook ржерж╛ржХрж▓рзЗ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи
    await app.bot.delete_webhook(drop_pending_updates=True)

    print("тЬЕ Bot is running...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
