import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from keep_alive import keep_alive

# Bot Configurations
BOT_TOKEN = "8155786084:AAFSgqmR8Gxsz4XHliErBhmIpYw_bDdcjA0"
REQUIRED_CHANNEL = "@swegenbd"
DEVELOPER_USERNAME = "@Swygen_bd"
ACCESS_PASSWORD = "SR2580BD"

# Logging
logging.basicConfig(level=logging.INFO)

# Track users waiting for password
user_password_request = {}
EMOJI_REACTIONS = ["тЭдя╕ПтАНЁЯФе", "тЪб", "ЁЯЧ┐", "ЁЯОЙ", "ЁЯТп"]

# Start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        member = await context.bot.get_chat_member(chat_id=REQUIRED_CHANNEL, user_id=user.id)
        if member.status not in ['member', 'administrator', 'creator']:
            raise Exception("Not joined")
    except:
        join_button = InlineKeyboardMarkup([
            [InlineKeyboardButton("тЬЕ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзЛ", url=f"https://t.me/{REQUIRED_CHANNEL.lstrip('@')}")],
            [InlineKeyboardButton("ржЖржорж┐ ржЬрзЯрзЗржи ржХрж░рзЗржЫрж┐", callback_data="check_joined")]
        ])
        await update.message.reply_text("ржмржЯ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзБржи:", reply_markup=join_button)
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("тЮХ Add Group", callback_data="ask_password")],
        [InlineKeyboardButton("ЁЯФС Request Key", callback_data="request_key")],
        [InlineKeyboardButton("ЁЯСд Developer", callback_data="developer")]
    ])
    await update.message.reply_text("рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪрзЗрж░ ржЕржкрж╢ржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:", reply_markup=keyboard)

# Check Join Callback
async def check_joined_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    try:
        member = await context.bot.get_chat_member(chat_id=REQUIRED_CHANNEL, user_id=user.id)
        if member.status in ['member', 'administrator', 'creator']:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("тЮХ Add Group", callback_data="ask_password")],
                [InlineKeyboardButton("ЁЯФС Request Key", callback_data="request_key")],
                [InlineKeyboardButton("ЁЯСд Developer", callback_data="developer")]
            ])
            await query.edit_message_text("тЬЕ ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗржи!\nржирж┐ржЪрзЗрж░ ржЕржкрж╢ржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:", reply_markup=keyboard)
        else:
            raise Exception("Still not joined")
    except:
        await query.edit_message_text("тЭМ ржЖржкржирж┐ ржПржЦржиржУ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзЗржиржирж┐! ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржЧрзЗ ржЬрзЯрзЗржи ржХрж░рзБржиред")

# Ask for password
async def ask_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_password_request[user_id] = True
    await query.answer()
    await query.message.reply_text("тЮХ ржмржЯржЯрж┐ ржЧрзНрж░рзБржкрзЗ ржЕрзНржпрж╛ржб ржХрж░рждрзЗ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзНрж░ржпрж╝рзЛржЬржиред\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж▓рж┐ржЦрзБржи:")

# Handle password input
async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_password_request.get(user_id):
        if text == ACCESS_PASSWORD:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("тЬЕ ржПржЦржи ржЧрзНрж░рзБржкрзЗ ржмржЯ ржПржб ржХрж░рзБржи", url=f"https://t.me/{context.bot.username}?startgroup=true")]
            ])
            await update.message.reply_text("тЬЕ рж╕ржарж┐ржХ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб! ржПржЦржи ржЖржкржирж┐ ржмржЯржХрзЗ ржЧрзНрж░рзБржкрзЗ ржПржб ржХрж░рждрзЗ ржкрж╛рж░рзЗржи:", reply_markup=keyboard)
        else:
            await update.message.reply_text("тЭМ ржнрзБрж▓ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб! ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржЕржержмрж╛ 'Request Key' ржмрж╛ржЯржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред")
        user_password_request[user_id] = False

# Request Key
async def request_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    text = (
        "ЁЯФР *Exclusive Access Required!*\n\n"
        "ржмржЯржЯрж┐ржХрзЗ ржЧрзНрж░рзБржкрзЗ ржпрзБржХрзНржд ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржмрж┐рж╢рзЗрж╖ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзНрж░ржпрж╝рзЛржЬржиред\n\n"
        "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзЗрждрзЗ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред\n\n"
        "_ржЖржкржирж╛рж░ ржЖржЧрзНрж░рж╣рзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!_"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("тЬЙя╕П Contact Admin", url=f"https://t.me/{DEVELOPER_USERNAME}")]
    ])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode="Markdown")

# Developer Info
async def developer_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    text = (
        "ЁЯМЯ *ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ ржЫрзЛржБржпрж╝рж╛ржпрж╝ ржПржХржЯрзБ ржнрж┐ржирзНржи ржХрж┐ржЫрзБ!*\n\n"
        "*Developer: Swygen*\n"
        "ржпрж┐ржирж┐ ржирж┐рж░рж▓рж╕ржнрж╛ржмрзЗ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржХржорж┐ржЙржирж┐ржЯрж┐ржХрзЗ рж╕ржорж░рзНржержи ржХрж░ржЫрзЗржи ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ ржЫрзЛржБржпрж╝рж╛ржпрж╝ред\n\n"
        "ржпрзЛржЧрж╛ржпрзЛржЧрзЗрж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("тЬЙя╕П ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи - Swygen", url=f"https://t.me/{DEVELOPER_USERNAME}")]
    ])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode="Markdown")

# React to all group messages
async def react_to_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type in ["group", "supergroup"]:
        emoji = random.choice(EMOJI_REACTIONS)
        try:
            await context.bot.set_message_reaction(
                chat_id=update.message.chat_id,
                message_id=update.message.message_id,
                reaction=[emoji]
            )
        except Exception as e:
            logging.warning(f"Reaction failed: {e}")

# Main
if __name__ == '__main__':
    keep_alive()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(check_joined_callback, pattern="check_joined"))
    app.add_handler(CallbackQueryHandler(ask_password, pattern="ask_password"))
    app.add_handler(CallbackQueryHandler(request_key, pattern="request_key"))
    app.add_handler(CallbackQueryHandler(developer_info, pattern="developer"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_password))
    app.add_handler(MessageHandler(filters.ALL, react_to_messages))  # React to all group messages

    print("тЬЕ Bot is running...")
    app.run_polling()
